{"version":3,"file":"index.js","sources":["src/flyweight-pool.ts","src/config.ts","src/misc.ts","src/snapshot.ts","src/state.ts","src/assert-snapshot.ts","src/assert-snapshot-throws.ts","src/register.ts"],"sourcesContent":["export class FlyweightPool<K, V> {\n    private readonly factory: (key: K) => Promise<V>\n    private readonly cache = new Map<K, V>()\n\n    constructor(factory: (key: K) => Promise<V>) {\n        this.factory = factory\n    }\n\n    async get(key: K): Promise<V> {\n        let value = this.cache.get(key)\n        if (value === undefined) {\n            value = await this.factory(key)\n            this.cache.set(key, value)\n        }\n        return value\n    }\n\n    values(): IterableIterator<V> {\n        return this.cache.values()\n    }\n\n    clear(): void {\n        this.cache.clear()\n    }\n}\n","// Wrap try-catch for running on browsers.\n// Expected to replace `process.env.MOCHA_ASSERT_SNAPSHOT` with a concrete value\n// in that case.\nexport const isUpdateMode =\n    try_(() => process.argv.includes(\"--update\")) ||\n    try_(() => process.env.MOCHA_ASSERT_SNAPSHOT === \"update\") // eslint-disable-line no-process-env\n\nfunction try_(f: () => boolean): boolean {\n    try {\n        return f()\n    } catch {\n        //istanbul ignore next\n        return false\n    }\n}\n","import fs from \"fs\"\n\nexport function dirname(filePath: string): string {\n    const i = filePath.lastIndexOf(\"/\")\n    //istanbul ignore if\n    if (i <= 0) {\n        return filePath\n    }\n    return filePath.slice(0, i)\n}\n\nexport async function ensureDirectory(\n    filePath: string,\n    pathDirname = dirname,\n): Promise<void> {\n    if (await isDirectory(filePath)) {\n        return\n    }\n\n    const dirPath = pathDirname(filePath)\n    if (dirPath !== filePath) {\n        await ensureDirectory(dirPath, pathDirname)\n    }\n    try {\n        await mkdir(filePath)\n    } catch (error) {\n        //istanbul ignore next\n        if (error.code === \"EEXIST\") {\n            return\n        }\n        //istanbul ignore next\n        throw error\n    }\n}\n\nfunction isDirectory(filePath: string): Promise<boolean> {\n    return new Promise(resolve => {\n        fs.stat(filePath, (_error, stats) => {\n            if (stats?.isDirectory()) {\n                resolve(true)\n            } else {\n                resolve(false)\n            }\n        })\n    })\n}\n\nfunction mkdir(filePath: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n        fs.mkdir(filePath, error => {\n            //istanbul ignore else\n            if (error == null || error.code === \"EEXIST\") {\n                resolve()\n            } else {\n                reject(error)\n            }\n        })\n    })\n}\n","import fs from \"fs\"\nimport format from \"pretty-format\"\nimport { isUpdateMode } from \"./config\"\nimport { dirname, ensureDirectory } from \"./misc\"\n\nexport class Snapshot {\n    private readonly filePath: string\n    private readonly content: Record<string, string> = Object.create(null)\n    private readonly unusedKeys = new Set<string>()\n    private updated = false\n    private currentTest = \"\"\n    private currentIndex = 0\n\n    constructor(filePath: string) {\n        this.filePath = filePath\n    }\n\n    setTestTitle(title: string): void {\n        if (title !== this.currentTest) {\n            this.currentIndex = 0\n        }\n        this.currentTest = title\n    }\n\n    acquireSnapshotEntryKey(): string {\n        const index = this.currentIndex++\n        const suffix = index === 0 ? \" \" : ` #${index}`\n        const key = `${this.currentTest}${suffix}`\n\n        this.unusedKeys.delete(key)\n\n        return key\n    }\n\n    getSnapshotValue(key: string): string | undefined {\n        return this.content[key]\n    }\n\n    assert(key: string, value: unknown): this {\n        const expected = this.content[key]\n        const actual = format(value)\n\n        if (isUpdateMode || expected === undefined) {\n            this.content[key] = actual\n            this.updated = true\n        } else if (actual !== expected) {\n            throw Object.assign(new Error(\"Different from the snapshot\"), {\n                code: \"ERR_ASSERTION\",\n                operator: \"strictEqual\",\n                actual,\n                expected,\n                generatedMessage: false,\n            })\n        }\n\n        return this\n    }\n\n    load(): Promise<this> {\n        return new Promise<this>((resolve, reject) => {\n            fs.readFile(this.filePath, \"utf8\", (readError, data) => {\n                if (readError != null) {\n                    //istanbul ignore else\n                    if (readError.code === \"ENOENT\") {\n                        resolve(this)\n                    } else {\n                        reject(readError)\n                    }\n                    return\n                }\n                try {\n                    new Function(\"exports\", data)(this.content)\n                    for (const key of Object.keys(this.content)) {\n                        this.unusedKeys.add(key)\n                    }\n\n                    resolve(this)\n                } catch (parseError) {\n                    //istanbul ignore next\n                    reject(parseError)\n                }\n            })\n        })\n    }\n\n    save(): Promise<this> {\n        return new Promise<this>((resolve, reject) => {\n            // Clear unused data\n            if (isUpdateMode) {\n                for (const key of this.unusedKeys) {\n                    delete this.content[key]\n                    this.updated = true\n                }\n            }\n\n            // Done if no updated\n            if (!this.updated) {\n                resolve(this)\n                return\n            }\n\n            // Write\n            const data = Object.entries(this.content)\n                .map(([key, value]) => {\n                    const keyStr = JSON.stringify(key)\n                    const valStr = value.replace(/`|\\$\\{/gu, '$${\"$&\"}') // eslint-disable-line no-template-curly-in-string\n                    return `exports[${keyStr}] = String.raw\\`\\n${valStr}\\n\\`.slice(1, -1)`\n                })\n                .sort(undefined)\n                .join(\"\\n\\n\")\n\n            ensureDirectory(dirname(this.filePath)).then(() => {\n                fs.writeFile(this.filePath, data, writeError => {\n                    //istanbul ignore else\n                    if (writeError == null) {\n                        resolve(this)\n                    } else {\n                        reject(writeError)\n                    }\n                })\n            }, reject)\n        })\n    }\n}\n","import { FlyweightPool } from \"./flyweight-pool\"\nimport { Snapshot } from \"./snapshot\"\n\nexport const snapshotPool = new FlyweightPool((filePath: string) =>\n    new Snapshot(toSnapshotFilePath(filePath)).load(),\n)\n\nexport let currentSnapshot: Snapshot | undefined\nexport function setCurrentSnapshot(snapshot: Snapshot | undefined): void {\n    currentSnapshot = snapshot\n}\n\nfunction toSnapshotFilePath(filePath: string): string {\n    const ancestors = filePath.replace(/\\\\/gu, \"/\").split(\"/\")\n    const rawName = ancestors.pop()\n    const name = rawName?.endsWith(\".js\") ? rawName : `${rawName}.js`\n    return [...ancestors, \"__snapshot__\", name].join(\"/\")\n}\n","import { currentSnapshot } from \"./state\"\n\n/**\n * Assert that a value equals the previous snapshot.\n *\n * If the value didn't equal the previous snapshot, this throws an error.\n *\n * In any of the following cases, this updates the snapshot rather than throwing\n * errors.\n * - No previous snapshots exist.\n * - `\"--update\"` exist in `process.argv`.\n * - `process.env.MOCHA_ASSERT_SNAPSHOT` is `\"update\"`.\n *\n * @param value The value to compare with snapshot.\n * @throws {@link Error} Thrown if the value didn't equal the previous snapshot.\n */\nexport function assertSnapshot(value: unknown): void {\n    if (currentSnapshot == null) {\n        throw new Error(\n            'Snapshot wasn\\'t initialized. Ensure giving \"--require mocha-assert-snapshot\" to mocha.',\n        )\n    }\n\n    const key = currentSnapshot.acquireSnapshotEntryKey()\n    currentSnapshot.assert(key, value)\n}\n","import { currentSnapshot } from \"./state\"\n\n/**\n * Assert that a function throws an error that equals the previous snapshot.\n *\n * If the thrown error didn't equal the previous snapshot, this throws an error.\n *\n * In any of the following cases, this updates the snapshot rather than throwing\n * errors.\n * - No previous snapshots exist.\n * - `\"--update\"` exist in `process.argv`.\n * - `process.env.MOCHA_ASSERT_SNAPSHOT` is `\"update\"`.\n *\n * @param func The function that throws an error to compare with snapshot.\n * @throws {@link Error} Thrown if the function didn't throw any errors or the\n * thrown error didn't equal the previous snapshot.\n */\nexport function assertSnapshotThrows<T>(\n    func: () => T,\n): T extends PromiseLike<any> ? Promise<void> : void {\n    if (currentSnapshot == null) {\n        throw new Error(\n            'Snapshot wasn\\'t initialized. Ensure giving \"--require mocha-assert-snapshot\" to mocha.',\n        )\n    }\n    if (typeof func !== \"function\") {\n        throw new TypeError('\"func\" must be a function')\n    }\n\n    const snapshot = currentSnapshot\n    const key = snapshot.acquireSnapshotEntryKey()\n    return normalizeCall(func, (thrown, error) => {\n        if (thrown) {\n            snapshot.assert(key, error)\n        } else {\n            const expected =\n                snapshot.getSnapshotValue(key) ?? \"(not thrown yet)\"\n            throw new Error(`Expected to throw an error: ${expected}`)\n        }\n    })\n}\n\nfunction normalizeCall(\n    func: () => any,\n    callback: (thrown: boolean, error: any) => void,\n): any {\n    let temp: any\n    try {\n        temp = func()\n    } catch (error) {\n        return callback(true, error)\n    }\n\n    if (typeof temp?.then !== \"function\") {\n        return callback(false, undefined)\n    }\n\n    return temp.then(\n        () => {\n            callback(false, undefined)\n        },\n        (error: any) => {\n            callback(true, error)\n        },\n    )\n}\n","import { setCurrentSnapshot, snapshotPool } from \"./state\"\n\n/**\n * Define the hooks to read/write snapshots.\n *\n * This is used in `--require mocha-assert-snapshot` as a root hook plugin.\n *\n * Don't use this object directly.\n * This package may change this object in a patch version.\n *\n * @internal\n * @see https://mochajs.org/#root-hook-plugins\n */\nexport const mochaHooks = {\n    // Load snapshot and set the current test name.\n    async beforeEach(this: any): Promise<void> {\n        const testFilePath = this.currentTest?.file ?? \"anonymous.js\"\n        const snapshot = await snapshotPool.get(testFilePath)\n        snapshot.setTestTitle(this.currentTest?.fullTitle() ?? \"\")\n        setCurrentSnapshot(snapshot)\n    },\n\n    // Reset the current test name.\n    afterEach(this: any): void {\n        setCurrentSnapshot(undefined)\n    },\n\n    // Save snapshots.\n    async afterAll(): Promise<void> {\n        const promises = Array.from(snapshotPool.values(), snapshot =>\n            snapshot.save(),\n        )\n        snapshotPool.clear()\n\n        // Wait for all promises even if errored.\n        let firstError: unknown = undefined\n        for (const promise of promises) {\n            try {\n                await promise\n            } catch (error) {\n                //istanbul ignore next\n                firstError = firstError ?? error\n            }\n        }\n        //istanbul ignore if\n        if (firstError !== undefined) {\n            throw firstError\n        }\n    },\n}\n"],"names":["fs","format"],"mappings":"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"}